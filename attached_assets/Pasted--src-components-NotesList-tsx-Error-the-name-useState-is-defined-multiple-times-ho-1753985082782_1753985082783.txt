./src/components/NotesList.tsx
Error: 
  × the name `useState` is defined multiple times
     ╭─[/home/runner/workspace/src/components/NotesList.tsx:1:1]
   1 │ "use client";
   2 │ 
   3 │ import { useState, useEffect } from "react";
     ·          ────┬───
     ·              ╰── previous definition of `useState` here
   4 │ import { useAuth } from "../lib/hooks/useAuth";
   5 │ import { getDocuments, updateDocument, deleteDocument } from "../lib/firebase/firebaseUtils";
   6 │ import { Edit, Trash2, Save, X, Calendar, Clock } from "lucide-react";
   7 │ import { format } from "date-fns";
   8 │ 
   9 │ interface Note {
  10 │   id: string;
  11 │   content: string;
  12 │   timestamp: string;
  13 │   createdAt: any;
  14 │   userId: string;
  15 │ }
  16 │ 
  17 │ interface NotesListProps {
  18 │   notes: Note[];
  19 │   onNotesUpdate: (notes: Note[]) => void;
  20 │ }
  21 │ 
  22 │ export function NotesList({ notes, onNotesUpdate }: NotesListProps) {
  23 │   const { user } = useAuth();
  24 │   const [editingNote, setEditingNote] = useState<string | null>(null);
  25 │   const [editContent, setEditContent] = useState("");
  26 │   const [isLoading, setIsLoading] = useState(true);
  27 │ 
  28 │   useEffect(() => {
  29 │     loadNotes();
  30 │   }, [user]);
  31 │ 
  32 │   const loadNotes = async () => {
  33 │     if (!user) return;
  34 │ 
  35 │     try {
  36 │       setIsLoading(true);
  37 │       const allNotes = await getDocuments("notes");
  38 │       const userNotes = allNotes
  39 │         .filter((note: Note) => note.userId === user.uid)
  40 │         .sort((a: Note, b: Note) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
  41 │       
  42 │       onNotesUpdate(userNotes);
  43 │     } catch (error) {
  44 │       console.error("Error loading notes:", error);
  45 │     } finally {
  46 │       setIsLoading(false);
  47 │     }
  48 │   };
  49 │ 
  50 │   const startEditing = (note: Note) => {
  51 │     setEditingNote(note.id);
  52 │     setEditContent(note.content);
  53 │   };
  54 │ 
  55 │   const cancelEditing = () => {
  56 │     setEditingNote(null);
  57 │     setEditContent("");
  58 │   };
  59 │ 
  60 │   const saveEdit = async () => {
  61 │     if (!editingNote || !editContent.trim()) return;
  62 │ 
  63 │     try {
  64 │       await updateDocument("notes", editingNote, {
  65 │         content: editContent.trim(),
  66 │         updatedAt: new Date(),
  67 │       });
  68 │ 
  69 │       // Update local state
  70 │       const updatedNotes = notes.map(note =>
  71 │         note.id === editingNote
  72 │           ? { ...note, content: editContent.trim() }
  73 │           : note
  74 │       );
  75 │       onNotesUpdate(updatedNotes);
  76 │ 
  77 │       setEditingNote(null);
  78 │       setEditContent("");
  79 │     } catch (error) {
  80 │       console.error("Error updating note:", error);
  81 │     }
  82 │   };
  83 │ 
  84 │   const deleteNote = async (noteId: string) => {
  85 │     if (!confirm("Are you sure you want to delete this note?")) return;
  86 │ 
  87 │     try {
  88 │       await deleteDocument("notes", noteId);
  89 │       
  90 │       // Update local state
  91 │       const updatedNotes = notes.filter(note => note.id !== noteId);
  92 │       onNotesUpdate(updatedNotes);
  93 │     } catch (error) {
  94 │       console.error("Error deleting note:", error);
  95 │     }
  96 │   };
  97 │ 
  98 │   const formatDate = (timestamp: string) => {
  99 │     try {
 100 │       const date = new Date(timestamp);
 101 │       return format(date, "MMM dd, yyyy 'at' h:mm a");
 102 │     } catch {
 103 │       return "Unknown date";
 104 │     }
 105 │   };
 106 │ 
 107 │   if (isLoading) {
 108 │     return (
 109 │       <div className="bg-white rounded-lg shadow-md p-6">
 110 │         <div className="text-center">
 111 │           <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
 112 │           <p className="text-gray-600 mt-2">Loading notes...</p>
 113 │         </div>
 114 │       </div>
 115 │     );
 116 │   }
 117 │ 
 118 │   return (
 119 │     <div className="bg-white rounded-lg shadow-md p-6">
 120 │       <h2 className="text-2xl font-semibold text-gray-800 mb-6">Your Notes</h2>
 121 │       
 122 │       {notes.length === 0 ? (
 123 │         <div className="text-center py-8">
 124 │           <div className="w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-4">
 125 │             <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
 126 │               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
 127 │             </svg>
 128 │           </div>
 129 │           <p className="text-gray-600">No notes yet. Start recording to create your first note!<